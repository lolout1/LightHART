import torch
import torch.nn as nn
import torch.nn.functional as F
from functools import partial
from .model_utils import Block

class MultiModalTeacher(nn.Module):
    def __init__(
        self,
        device='cuda',
        mocap_frames=128,
        acc_frames=128,
        num_joints=32,
        in_chans=3,
        num_patch=4,
        acc_coords=4,
        spatial_embed=64,
        sdepth=2,
        adepth=2,
        tdepth=2,
        num_heads=2,
        mlp_ratio=2,
        qkv_bias=True,
        qk_scale=None,
        op_type='all',
        embed_type='lin',
        drop_rate=0.2,
        attn_drop_rate=0.2,
        drop_path_rate=0.2,
        norm_layer=None,
        num_classes=2
    ):
        super().__init__()
        norm_layer = norm_layer or partial(nn.LayerNorm, eps=1e-6)

        # Save parameters
        self.spatial_embed = spatial_embed
        self.num_joints = num_joints
        self.in_chans = in_chans
        self.acc_coords = acc_coords
        self.seq_length = acc_frames

        # Skeleton embedding
        if embed_type == 'lin':
            self.Skeleton_embedding = nn.Sequential(
                nn.Linear(num_joints * in_chans, spatial_embed),
                nn.LayerNorm(spatial_embed),
                nn.GELU(),
                nn.Dropout(drop_rate)
            )
        else:
            self.Skeleton_embedding = nn.Sequential(
                nn.Conv1d(in_chans, spatial_embed, kernel_size=1),
                nn.BatchNorm1d(spatial_embed),
                nn.GELU()
            )

        # Phone accelerometer processing
        self.phone_acc_processor = nn.Sequential(
            nn.Linear(acc_coords, spatial_embed),
            nn.LayerNorm(spatial_embed),
            nn.GELU(),
            nn.Dropout(drop_rate)
        )

        # Watch accelerometer processing
        self.watch_acc_processor = nn.Sequential(
            nn.Linear(acc_coords, spatial_embed),
            nn.LayerNorm(spatial_embed),
            nn.GELU(),
            nn.Dropout(drop_rate)
        )

        # Fusion module for accelerometers
        self.acc_fusion = nn.Sequential(
            nn.Linear(spatial_embed * 2, spatial_embed),
            nn.LayerNorm(spatial_embed),
            nn.GELU(),
            nn.Dropout(drop_rate)
        )

        # Final fusion module for all modalities
        self.modality_fusion = nn.Sequential(
            nn.Linear(spatial_embed * 2, spatial_embed),
            nn.LayerNorm(spatial_embed),
            nn.GELU(),
            nn.Dropout(drop_rate)
        )

        # Temporal token and position embedding
        self.temp_token = nn.Parameter(torch.zeros(1, 1, spatial_embed))
        self.pos_embed = nn.Parameter(torch.zeros(1, acc_frames + 1, spatial_embed))

        # Initialize embeddings
        nn.init.trunc_normal_(self.temp_token, std=0.02)
        nn.init.trunc_normal_(self.pos_embed, std=0.02)

        # Transformer blocks
        self.blocks = nn.ModuleList([
            Block(
                dim=spatial_embed,
                num_heads=num_heads,
                mlp_ratio=mlp_ratio,
                qkv_bias=qkv_bias,
                qk_scale=qk_scale,
                drop=drop_rate,
                attn_drop=attn_drop_rate,
                drop_path=drop_path_rate,
                norm_layer=norm_layer
            )
            for _ in range(tdepth)
        ])

        # Classification head
        self.norm = norm_layer(spatial_embed)
        self.head = nn.Linear(spatial_embed, num_classes)

    def _validate_input(self, tensor, name):
        """Validate input tensor dimensions"""
        if tensor is None:
            raise ValueError(f"{name} is None")
        if tensor.dim() not in [3, 4]:
            raise ValueError(f"Expected {name} to have 3 or 4 dimensions, got {tensor.dim()}")
        return tensor

    def forward(self, acc_data, skl_data):
        # Input validation and shape printing for debugging
        acc_data = self._validate_input(acc_data, "acc_data")
        skl_data = self._validate_input(skl_data, "skl_data")
        
        self.print_shapes("Initial acc_data", acc_data)
        self.print_shapes("Initial skl_data", skl_data)

        B = acc_data.shape[0]  # batch size
        T = acc_data.shape[1]  # sequence length

        # Process skeleton data - handle both 3D and 4D inputs
        if skl_data.dim() == 4:
            # If input is [B, T, J, C], reshape to [B, T, J*C]
            skl_data = skl_data.reshape(B, T, self.num_joints * self.in_chans)
        else:
            # If input is already [B, T, F], keep as is
            skl_data = skl_data.view(B, T, self.num_joints * self.in_chans)

        skl_features = self.Skeleton_embedding(skl_data)  # [B, T, C]
        self.print_shapes("Skeleton features", skl_features)

        # Process accelerometer data - split phone and watch
        phone_data = torch.zeros((B, T, self.acc_coords), device=acc_data.device)
        watch_data = torch.zeros((B, T, self.acc_coords), device=acc_data.device)
        
        # Safely handle accelerometer data splitting
        if acc_data.shape[-1] >= self.acc_coords:
            phone_data = acc_data[..., :self.acc_coords]
        if acc_data.shape[-1] >= 2 * self.acc_coords:
            watch_data = acc_data[..., self.acc_coords:2*self.acc_coords]

        # Process each accelerometer stream
        phone_features = self.phone_acc_processor(phone_data)
        watch_features = self.watch_acc_processor(watch_data)
        
        self.print_shapes("Phone features", phone_features)
        self.print_shapes("Watch features", watch_features)

        # Fuse accelerometer features
        acc_features = self.acc_fusion(torch.cat([phone_features, watch_features], dim=-1))
        self.print_shapes("Fused acc features", acc_features)

        # Combine all modalities
        combined = self.modality_fusion(torch.cat([skl_features, acc_features], dim=-1))
        self.print_shapes("Combined features", combined)

        # Add class token
        cls_token = self.temp_token.expand(B, -1, -1)
        x = torch.cat((cls_token, combined), dim=1)

        # Add position embeddings
        x = x + self.pos_embed

        # Apply transformer blocks
        for blk in self.blocks:
            x = blk(x)

        # Classification
        x = self.norm(x[:, 0])  # Use CLS token
        x = self.head(x)

        return x

    def print_shapes(self, prefix, tensor):
        """Debug helper to print tensor shapes"""
        print(f"{prefix}: {tensor.shape}")
